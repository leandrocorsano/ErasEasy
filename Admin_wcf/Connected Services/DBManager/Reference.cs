//------------------------------------------------------------------------------
// <auto-generated>
//     Il codice è stato generato da uno strumento.
//     Versione runtime:4.0.30319.42000
//
//     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
//     il codice viene rigenerato.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Admin_wcf.DBManager {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DBManager.IDBManager")]
    public interface IDBManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManager/DBinsert", ReplyAction="http://tempuri.org/IDBManager/DBinsertResponse")]
        bool DBinsert(string table, string values, string field);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManager/DBinsert", ReplyAction="http://tempuri.org/IDBManager/DBinsertResponse")]
        System.Threading.Tasks.Task<bool> DBinsertAsync(string table, string values, string field);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManager/DBdelete", ReplyAction="http://tempuri.org/IDBManager/DBdeleteResponse")]
        bool DBdelete(string table, string condition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManager/DBdelete", ReplyAction="http://tempuri.org/IDBManager/DBdeleteResponse")]
        System.Threading.Tasks.Task<bool> DBdeleteAsync(string table, string condition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManager/DBselect", ReplyAction="http://tempuri.org/IDBManager/DBselectResponse")]
        System.Data.DataSet DBselect(string campi, string tabella, string condizione);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManager/DBselect", ReplyAction="http://tempuri.org/IDBManager/DBselectResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> DBselectAsync(string campi, string tabella, string condizione);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManager/DBupdate", ReplyAction="http://tempuri.org/IDBManager/DBupdateResponse")]
        bool DBupdate(string table, string setter, string condition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManager/DBupdate", ReplyAction="http://tempuri.org/IDBManager/DBupdateResponse")]
        System.Threading.Tasks.Task<bool> DBupdateAsync(string table, string setter, string condition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManager/DBtransaction", ReplyAction="http://tempuri.org/IDBManager/DBtransactionResponse")]
        bool DBtransaction(System.Collections.Generic.List<string> query);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBManager/DBtransaction", ReplyAction="http://tempuri.org/IDBManager/DBtransactionResponse")]
        System.Threading.Tasks.Task<bool> DBtransactionAsync(System.Collections.Generic.List<string> query);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDBManagerChannel : Admin_wcf.DBManager.IDBManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBManagerClient : System.ServiceModel.ClientBase<Admin_wcf.DBManager.IDBManager>, Admin_wcf.DBManager.IDBManager {
        
        public DBManagerClient() {
        }
        
        public DBManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DBManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool DBinsert(string table, string values, string field) {
            return base.Channel.DBinsert(table, values, field);
        }
        
        public System.Threading.Tasks.Task<bool> DBinsertAsync(string table, string values, string field) {
            return base.Channel.DBinsertAsync(table, values, field);
        }
        
        public bool DBdelete(string table, string condition) {
            return base.Channel.DBdelete(table, condition);
        }
        
        public System.Threading.Tasks.Task<bool> DBdeleteAsync(string table, string condition) {
            return base.Channel.DBdeleteAsync(table, condition);
        }
        
        public System.Data.DataSet DBselect(string campi, string tabella, string condizione) {
            return base.Channel.DBselect(campi, tabella, condizione);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> DBselectAsync(string campi, string tabella, string condizione) {
            return base.Channel.DBselectAsync(campi, tabella, condizione);
        }
        
        public bool DBupdate(string table, string setter, string condition) {
            return base.Channel.DBupdate(table, setter, condition);
        }
        
        public System.Threading.Tasks.Task<bool> DBupdateAsync(string table, string setter, string condition) {
            return base.Channel.DBupdateAsync(table, setter, condition);
        }
        
        public bool DBtransaction(System.Collections.Generic.List<string> query) {
            return base.Channel.DBtransaction(query);
        }
        
        public System.Threading.Tasks.Task<bool> DBtransactionAsync(System.Collections.Generic.List<string> query) {
            return base.Channel.DBtransactionAsync(query);
        }
    }
}
